// const mqtt = require("mqtt");

// // K·∫øt n·ªëi ƒë·∫øn MQTT Broker (Thay IP n·∫øu c·∫ßn)
// const client = mqtt.connect("mqtt://192.168.1.2:1883");

// client.on("connect", () => {
//     console.log("‚úÖ ƒê√£ k·∫øt n·ªëi MQTT Broker");

//     // G·ª≠i tin nh·∫Øn m·ªói 5 gi√¢y
//     setInterval(() => {
//         const message = JSON.stringify({ x: Math.random() * 10, y: Math.random() * 10, z: Math.random() * 5 });
//         client.publish("uwb/position", message);
//         console.log(`üì§ ƒê√£ g·ª≠i: ${message}`);
//     }, 5000);
// });

const mqtt = require("mqtt");
const readline = require("readline");

// Thay ƒë·ªïi IP theo broker c·ªßa b·∫°n
const BROKER_URL = "mqtt://localhost:1883"; // ho·∫∑c "mqtt://192.168.x.x:1883"
const TOPIC = "uwb/tagposition";

const client = mqtt.connect(BROKER_URL);

// T·∫°o giao di·ªán nh·∫≠p t·ª´ terminal
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});

client.on("connect", () => {
    console.log("‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi MQTT Broker");
    console.log(`üì§ Nh·∫≠p tin nh·∫Øn ƒë·ªÉ g·ª≠i l√™n topic "${TOPIC}"`);
    promptInput();
});

function promptInput() {
    rl.question("> Tin nh·∫Øn JSON (ho·∫∑c 'exit' ƒë·ªÉ tho√°t): ", (input) => {
        if (input.toLowerCase() === "exit") {
            rl.close();
            client.end();
            return;
        }

        try {
            const json = JSON.parse(input); // Ki·ªÉm tra n·∫øu l√† JSON h·ª£p l·ªá
            client.publish(TOPIC, JSON.stringify(json));
            console.log("üì® Tin nh·∫Øn ƒë√£ g·ª≠i!");
        } catch (e) {
            console.log("‚ùå Vui l√≤ng nh·∫≠p m·ªôt JSON h·ª£p l·ªá.");
        }

        promptInput(); // G·ªçi l·∫°i ƒë·ªÉ nh·∫≠p ti·∫øp
    });
}
