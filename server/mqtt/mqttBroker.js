const Aedes = require("aedes");
const net = require("net");
const pool = require("../config/db");
const dotenv = require("dotenv");
const tagManager = require("./tagManager");

dotenv.config();

const PORT = process.env.MQTT_PORT || 1883;
const aedes = Aedes();
const server = net.createServer(aedes.handle);

let latestMessage = null; // Bi·∫øn l∆∞u tin nh·∫Øn cu·ªëi
let latestMessages = {}; // Bi·∫øn l∆∞u tin nh·∫Øn cu·ªëi

server.listen(PORT, () => {
    console.log(`üöÄ Aedes MQTT Broker ƒëang ch·∫°y tr√™n c·ªïng ${PORT}`);
});

aedes.on("client", (client) => {
    console.log(`üì° Thi·∫øt b·ªã k·∫øt n·ªëi: ${client.id}`);
});

// aedes.on("publish", (packet, client) => {
//     if (client) {
//         const topic = packet.topic;
//         const message = packet.payload.toString();
//         const time = new Date();
//         console.log(`üì® Tin nh·∫Øn t·ª´ ${client.id}:`, topic, message);

//         // Ghi l·∫°i tin nh·∫Øn m·ªõi nh·∫•t
//         try {
//           const data = JSON.parse(message);
//           const deviceId = data.device_id;
//           latestMessages[deviceId] = {
//               topic,
//               message,
//               time,
//           };
//         } catch (err) {
//             console.error("‚ùå L·ªói parse JSON:", err.message);
//         }
//     }
// });
aedes.on("publish", (packet, client) => {
  if (client) {
      const topic = packet.topic;
      const message = packet.payload.toString();
      console.log(`Tin nh·∫Øn t·ª´ ${client.id}:`, topic, message);

      // Ghi l·∫°i tin nh·∫Øn m·ªõi nh·∫•t
      latestMessage = {
          topic,
          message,
      };

      if (topic === "uwb/register") {
          let data;

          try {
              data = JSON.parse(message);
          } catch (err) {
              console.error("‚ùå Kh√¥ng parse ƒë∆∞·ª£c JSON t·ª´ message:", message);
              return;
          }

          const tagId = data.tag_id;

          if (tagId) {
              tagManager.handleRegister(tagId, aedes);
          } else {
              console.error("‚ùå JSON h·ª£p l·ªá nh∆∞ng kh√¥ng c√≥ tr∆∞·ªùng 'id':", data);
          }
      }

      // Ngo√†i ra, n·∫øu tag g·ª≠i ƒë·ªãnh k·ª≥ ƒë·ªÉ duy tr√¨ "seen"

      if (topic === "uwb/tagposition") {
          const data = JSON.parse(message);
          const tagId = data.tag_id;
          if (tagId) {
              // C·∫≠p nh·∫≠t th·ªùi gian cu·ªëi c√πng th·∫•y tag
              tagManager.lastSeen[tagId] = Date.now();
              console.log(`üïí C·∫≠p nh·∫≠t th·ªùi gian cu·ªëi c√πng th·∫•y tag ${tagId}:`, new Date(tagManager.lastSeen[tagId]));
          } else {
              console.error("‚ùå Kh√¥ng t√¨m th·∫•y ID tag trong tin nh·∫Øn:", message);
          }
      }

      if (topic.startsWith("uwb/timeout")) {
          const data = JSON.parse(message);
          const tagId = data.tag_id;
          tagManager.handleTimeoutMessage(tagId, aedes);
      }
  }
});
// // L∆∞u tin nh·∫Øn cu·ªëi m·ªói 10 gi√¢y
// setInterval(async () => {
//     if (latestMessage) {
//         try {
//             await pool.query(
//                 "INSERT INTO mqtt_messages(topic, message) VALUES ($1, $2)",
//                 [latestMessage.topic, latestMessage.message]
//             );
//             console.log("üïí ƒê√£ l∆∞u tin nh·∫Øn m·ªõi nh·∫•t v√†o PostgreSQL");
//             latestMessage = null; // ƒê·∫∑t l·∫°i sau khi l∆∞u
//         } catch (err) {
//             console.error("‚ùå L·ªói khi l∆∞u DB:", err.message);
//         }
//     }
// }, 10000); // 10000 ms = 10 gi√¢y

// ‚è± L∆∞u d·ªØ li·ªáu HOURLY m·ªói gi·ªù
setInterval(async () => {
    for (const deviceId in latestMessages) {
      const latestMessage = latestMessages[deviceId];
      const data = JSON.parse(latestMessage.message);
      const time = latestMessage.time;
  
      try {
        const result = await pool.query(
          `SELECT * FROM device_location 
           WHERE device_id = $1 AND record_type = 'hourly' AND record_time = $2`,
          [data.device_id, time]
        );
  
        if (result.rows.length === 0) {
          await pool.query(
            `INSERT INTO device_location (
                device_id, tag_x, tag_y, tag_z,
                record_time, record_type
            ) VALUES ($1, $2, $3, $4, $5, 'hourly')`,
            [data.device_id, data.x, data.y, data.z, time]
          );
          console.log("üïê ƒê√£ l∆∞u b·∫£n ghi HOURLY cho device:", data.device_id);
        } else {
          console.log("‚ö†Ô∏è ƒê√£ t·ªìn t·∫°i b·∫£n ghi HOURLY cho device:", data.device_id);
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi l∆∞u HOURLY:", err.message);
      }
    }
  }, 6 * 1000); // m·ªói gi·ªù
  
  // ‚è± L∆∞u d·ªØ li·ªáu DAILY m·ªói ng√†y
  setInterval(async () => {
    for (const deviceId in latestMessages) {
      const latestMessage = latestMessages[deviceId];
      const data = JSON.parse(latestMessage.message);
      const time = latestMessage.time;

      try {
        const result = await pool.query(
          `SELECT * FROM device_location 
           WHERE device_id = $1 AND record_type = 'daily' AND record_time = $2`,
          [data.device_id, time]
        );
  
        if (result.rows.length === 0) {
          await pool.query(
            `INSERT INTO device_location (
                device_id, tag_x, tag_y, tag_z,
                record_time, record_type
            ) VALUES ($1, $2, $3, $4, $5, 'daily')`,
            [data.device_id, data.x, data.y, data.z, time]
          );
          console.log("üìÖ ƒê√£ l∆∞u b·∫£n ghi DAILY cho device:", data.device_id);
        } else {
          console.log("‚ö†Ô∏è ƒê√£ t·ªìn t·∫°i b·∫£n ghi DAILY cho device:", data.device_id);
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi l∆∞u DAILY:", err.message);
      }
    }
  }, 24 * 1000); // m·ªói ng√†y

module.exports = aedes;