const Aedes = require("aedes");
const net = require("net");
const pool = require("../config/db");
const dotenv = require("dotenv");

dotenv.config();

const PORT = process.env.MQTT_PORT || 1883;
const aedes = Aedes();
const server = net.createServer(aedes.handle);

let latestMessage = null; // Bi·∫øn l∆∞u tin nh·∫Øn cu·ªëi

server.listen(PORT, () => {
    console.log(`üöÄ Aedes MQTT Broker ƒëang ch·∫°y tr√™n c·ªïng ${PORT}`);
});

aedes.on("client", (client) => {
    console.log(`üì° Thi·∫øt b·ªã k·∫øt n·ªëi: ${client.id}`);
});

aedes.on("publish", (packet, client) => {
    if (client) {
        const topic = packet.topic;
        const message = packet.payload.toString();
        const time = new Date();
        console.log(`üì® Tin nh·∫Øn t·ª´ ${client.id}:`, topic, message);

        // Ghi l·∫°i tin nh·∫Øn m·ªõi nh·∫•t
        latestMessage = {
            topic,
            message,
            time,
        };
    }
});

// // L∆∞u tin nh·∫Øn cu·ªëi m·ªói 10 gi√¢y
// setInterval(async () => {
//     if (latestMessage) {
//         try {
//             await pool.query(
//                 "INSERT INTO mqtt_messages(topic, message) VALUES ($1, $2)",
//                 [latestMessage.topic, latestMessage.message]
//             );
//             console.log("üïí ƒê√£ l∆∞u tin nh·∫Øn m·ªõi nh·∫•t v√†o PostgreSQL");
//             latestMessage = null; // ƒê·∫∑t l·∫°i sau khi l∆∞u
//         } catch (err) {
//             console.error("‚ùå L·ªói khi l∆∞u DB:", err.message);
//         }
//     }
// }, 10000); // 10000 ms = 10 gi√¢y

// ‚è± L∆∞u d·ªØ li·ªáu HOURLY m·ªói gi·ªù
setInterval(async () => {
    if (latestMessage) {
      const data = JSON.parse(latestMessage.message);
      const time = latestMessage.time;
  
      try {
        const result = await pool.query(
          `SELECT * FROM device_location 
           WHERE device_id = $1 AND record_type = 'hourly' AND record_time = $2`,
          [data.device_id, time]
        );
  
        if (result.rows.length === 0) {
          await pool.query(
            `INSERT INTO device_location (
                device_id, tag_x, tag_y, tag_z,
                an1rec_id, an2rec_id, an3rec_id, an4rec_id,
                record_time, record_type
            ) VALUES ($1, $2, $3, $4, 1, 2, 3, 4, $5, 'hourly')`,
            [data.device_id, data.x, data.y, data.z, time]
          );
          console.log("üïê ƒê√£ l∆∞u b·∫£n ghi HOURLY cho device:", data.device_id);
        } else {
          console.log("‚ö†Ô∏è ƒê√£ t·ªìn t·∫°i b·∫£n ghi HOURLY cho device:", data.device_id);
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi l∆∞u HOURLY:", err.message);
      }
    }
  }, 60 * 60 * 1000); // m·ªói gi·ªù
  
  // ‚è± L∆∞u d·ªØ li·ªáu DAILY m·ªói ng√†y
  setInterval(async () => {
    if (latestMessage) {
      const data = JSON.parse(latestMessage.message);
      const time = latestMessage.time;

      try {
        const result = await pool.query(
          `SELECT * FROM device_location 
           WHERE device_id = $1 AND record_type = 'daily' AND record_time = $2`,
          [data.device_id, time]
        );
  
        if (result.rows.length === 0) {
          await pool.query(
            `INSERT INTO device_location (
                device_id, tag_x, tag_y, tag_z,
                an1rec_id, an2rec_id, an3rec_id, an4rec_id,
                record_time, record_type
            ) VALUES ($1, $2, $3, $4, 1, 2, 3, 4, $5, 'daily')`,
            [data.device_id, data.x, data.y, data.z, time]
          );
          console.log("üìÖ ƒê√£ l∆∞u b·∫£n ghi DAILY cho device:", data.device_id);
        } else {
          console.log("‚ö†Ô∏è ƒê√£ t·ªìn t·∫°i b·∫£n ghi DAILY cho device:", data.device_id);
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi l∆∞u DAILY:", err.message);
      }
    }
  }, 24 * 60 * 60 * 1000); // m·ªói ng√†y

module.exports = aedes;